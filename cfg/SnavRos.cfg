#! /usr/bin/env python2
# /****************************************************************************
#  *   Copyright (c) 2017 Michael Shomin. All rights reserved.
#  *
#  * Redistribution and use in source and binary forms, with or without
#  * modification, are permitted provided that the following conditions
#  * are met:
#  *
#  * 1. Redistributions of source code must retain the above copyright
#  *    notice, this list of conditions and the following disclaimer.
#  * 2. Redistributions in binary form must reproduce the above copyright
#  *    notice, this list of conditions and the following disclaimer in
#  *    the documentation and/or other materials provided with the
#  *    distribution.
#  * 3. Neither the name ATLFlight nor the names of its contributors may be
#  *    used to endorse or promote products derived from this software
#  *    without specific prior written permission.
#  *
#  * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
#  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
#  * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
#  * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  * POSSIBILITY OF SUCH DAMAGE.
#  *
#  * In addition Supplemental Terms apply.  See the SUPPLEMENTAL file.
#  ****************************************************************************/


from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

# Vizualization params
gen.add("traj_viz_sample_rate", int_t, 0, "Sample rate for visualizing trajectory in Hz", 10, 1, 200)

# Takeoff params
gen.add("takeoff_height", double_t, 0, "Takeoff height in m", 1.5, 0.5, 5.0)

# Planner params
gen.add("planner_average_speed_xy", double_t, 0, "Planner's average XY speed for calculating waypoint timestamps in m/s", 0.5, 0.1, 10.0)
gen.add("planner_average_speed_z", double_t, 0, "Planner's average Z speed for calculating waypoint timestamps in m/s", 0.3, 0.1, 5.0)
gen.add("planner_loop", bool_t, 0, "Whether or not the trajectory should loop", False)

traj_type_enum = gen.enum([gen.const("SHORTEST_PATH", int_t, 0, ""),
                           gen.const("MIN_ACC", int_t, 1, ""),
                           gen.const("MIN_JERK", int_t, 2, ""),
                           gen.const("MIN_SNAP", int_t, 3, "")],
                          "An enum to set traj type")
gen.add("planner_traj_type", int_t, 0, "Trajectory generation strategy", 3, 0, 3, edit_method=traj_type_enum)

timestamp_strategy_enum = gen.enum([gen.const("USE_PROVIDED", int_t, 0, ""),
                                    gen.const("AVERAGE_SPEED", int_t, 1, "")],
                                   "An enum to set the timestamp strategy")
gen.add("planner_timestamp_strategy", int_t, 0, "Trajectory waypoint timestamp strategy", 1, 0, 1, edit_method=timestamp_strategy_enum)

exit(gen.generate('snav_ros', "snav_ros", "SnavRos"))

